<?xml version="1.0"?>

<!-- 
    * This file contains, among others, one macro for testing different placements
    * of the LIDAR, in this case velodye. This macro is not intended 
    * for production use but testpurpose only! See ticket #5753.
    *
    * Copyright (c) 2017 taurob GmbH. All rights reserved. Confidential and proprietary.
    * Perfektastrasse 57/7, 1230 Wien, Austria. office@taurob.com
-->

<robot xmlns:xacro="http://ros.org/wiki/xacro">

    <xacro:property name="M_PI" value="3.14159265359"/>

    <!-- Import laser scanner package for Velodyne VLP-16  -->
    <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>

    <!-- Macro for a rotating lidar.  
        Arguments:
        - parent: parent link e.g arm_link_1 or chassis_link
        - use_gpu: enable gpu support for raytracing. Doesn't work on VMWare.
        - frequency: Publish frequency for velodyne (for simulation)
        - topic: Topic of velodyne (for simulation)
        - xoffset: x offset of lidar_link from parent link
        - yoffset: y offset of lidar_link from parent link
        - zoffset: z offset of lidar_link from parent link. That's usually what you want to set.
        - pitch: pitch angle of the Velodyne. A positive value lets the Velodyne look down.
    -->
    <xacro:macro name="lidar_rotating" params="parent use_gpu frequency topic xoffset yoffset zoffset pitch">
        <!-- LINK SECTION -->
        <link name="lidar_link">
            <inertial>
                <origin xyz="0.0 0.0 ${-zoffset / 2}" rpy="0 0 0"/>
                <mass value="0.01"/>
                <inertia ixx="0.1" ixy="0.1" ixz="0.1" iyy="0.1" iyz="0.1" izz="0.1"/>
            </inertial>
        </link>

        <link name="lidar_link_rot">
            <inertial>
                <origin xyz="0.0 0.0 ${-zoffset / 2}" rpy="0 0 0"/>
                <mass value="0.01"/>
                <inertia ixx="0.1" ixy="0.1" ixz="0.1" iyy="0.1" iyz="0.1" izz="0.1"/>
            </inertial>
        </link>

        <!-- JOINT SECTION -->
        <joint name="lidar_joint" type="fixed">
            <origin xyz="${xoffset} ${yoffset} ${zoffset}" rpy="0 0 0"/>
            <parent link="${parent}"/>
            <child link="lidar_link"/>
        </joint>

        <joint name="lidar_joint_rot" type="continuous">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="lidar_link"/>
            <child link="lidar_link_rot"/>
            <axis xyz="0 0 1"/>

            <limit effort="1000.0" velocity="100.0" />
            <dynamics damping="10.0" friction="0.0"/>
        </joint>

        <!-- Add LIDAR(s) -->
        <xacro:VLP-16 parent="lidar_link_rot" name="velodyne_rot" topic="/${topic}" hz="${frequency}" samples="440" gpu="${use_gpu}">
            <origin xyz="0.0 0.0 0.0" rpy="0 ${pitch} 0" />
        </xacro:VLP-16>

        <!-- HW Interface -->
        <transmission name="lidar_joint_rot_transmssion">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="lidar_joint_rot">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="lidar_joint_rot_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>

    <!-- Macro for a fixed lidar.  
        Arguments:
        - parent: parent link e.g arm_link_1 or chassis_link
        - use_gpu: enable gpu support for raytracing. Doesn't work on VMWare.
        - frequency: Publish frequency for velodyne (for simulation)
        - topic: Topic of velodyne (for simulation)
        - xoffset: x offset of lidar_link from parent link
        - yoffset: y offset of lidar_link from parent link
        - zoffset: z offset of lidar_link from parent link. That's usually what you want to set.
        - pitch: pitch angle of the Velodyne. A positive value lets the Velodyne look down.
    -->
    <xacro:macro name="lidar_fixed" params="parent use_gpu frequency topic xoffset yoffset zoffset pitch yaw">
        <!-- LINK SECTION -->
        <link name="lidar_link">
            <inertial>
                <origin xyz="0.0 0.0 ${-zoffset / 2}" rpy="0 0 0"/>
                <mass value="0.01"/>
                <inertia ixx="0.1" ixy="0.1" ixz="0.1" iyy="0.1" iyz="0.1" izz="0.1"/>
            </inertial>
        </link>

        <link name="lidar_link_fixed">
            <inertial>
                <origin xyz="0.0 0.0 ${-zoffset / 2}" rpy="0 0 0"/>
                <mass value="0.01"/>
                <inertia ixx="0.1" ixy="0.1" ixz="0.1" iyy="0.1" iyz="0.1" izz="0.1"/>
            </inertial>
        </link>

        <!-- JOINT SECTION -->
        <joint name="lidar_joint" type="fixed">
            <origin xyz="${xoffset} ${yoffset} ${zoffset}" rpy="0 0 0"/>
            <parent link="${parent}"/>
            <child link="lidar_link"/>
        </joint>

        <joint name="lidar_joint_fix" type="fixed">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="lidar_link"/>
            <child link="lidar_link_fixed"/>
        </joint>

        <!-- Add LIDAR(s) -->
        <xacro:VLP-16 parent="lidar_link_fixed" name="velodyne" topic="${topic}" hz="${frequency}" samples="1024" gpu="${use_gpu}" min_range="0.45" collision_range="0.06">
            <origin xyz="0.0 0.0 0.0" rpy="0 ${pitch} ${yaw}" />
        </xacro:VLP-16>
    </xacro:macro>

    <!-- Macro for dynmically controlling the postion of a rotating lidar. For test purposes only. -->
    <!-- =================================FOR TESTING ONLY======================================== -->
    <xacro:macro name="lidar_placement_rot" params="parent use_gpu frequency topic xoffset yoffset zoffset pitch">

        <!-- LINK SECTION -->
        <link name="fake_liadr_front_link_z_0">
            <inertial>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
                <mass value="0.1"/>
                <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
            </inertial>
            <visual>
                <geometry>
                    <box size = "0.01 0.01 0.01" />
                </geometry>
            </visual>
        </link>

        <link name="fake_liadr_front_link_x_1">
            <inertial>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
                <mass value="0.1"/>
                <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
            </inertial>
            <visual>
                <geometry>
                    <box size = "0.01 0.01 0.01" />
                </geometry>
            </visual>
        </link>

        <link name="fake_liadr_front_link_y_2">
            <inertial>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
                <mass value="0.1"/>
                <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
            </inertial>
            <visual>
                <geometry>
                    <box size = "0.01 0.01 0.01" />
                </geometry>
            </visual>
        </link>

        <link name="fake_liadr_front_link_rot_y">
            <inertial>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
                <mass value="0.01"/>
                <inertia ixx="0.1" ixy="0.1" ixz="0.1" iyy="0.1" iyz="0.1" izz="0.1"/>
            </inertial>
            <visual>
                <geometry>
                    <box size = "0.01 0.01 0.01" />
                </geometry>
            </visual>
        </link>

        <link name="lidar_link_rot">
            <inertial>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
                <mass value="0.01"/>
                <inertia ixx="0.1" ixy="0.1" ixz="0.1" iyy="0.1" iyz="0.1" izz="0.1"/>
            </inertial>
        </link>

        <!-- JOINT SECTION -->

        <joint name="fake_liadr_front_joint_z_0" type="prismatic">
            <origin xyz="0 0 0.5" rpy="0 0 0"/>
            <parent link="${parent}"/>
            <child link="fake_liadr_front_link_z_0"/>
            <axis xyz="0 0 1"/>
            <limit effort="1000.0" lower="-0.5" upper="0.5" velocity="1.0"/>
        </joint>

        <joint name="fake_liadr_front_joint_x_1" type="prismatic">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="fake_liadr_front_link_z_0"/>
            <child link="fake_liadr_front_link_x_1"/>
            <axis xyz="1 0 0"/>
            <limit effort="1000.0" lower="-2.0" upper="2.0" velocity="1.0"/>
        </joint>

        <joint name="fake_liadr_front_joint_y_2" type="prismatic">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="fake_liadr_front_link_x_1"/>
            <child link="fake_liadr_front_link_y_2"/>
            <axis xyz="0 1 0"/>
            <limit effort="1000.0" lower="-2.0" upper="2.0" velocity="1.0"/>
        </joint>

        <joint name="lidar_joint_rot" type="continuous">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="fake_liadr_front_link_y_2"/>
            <child link="fake_liadr_front_link_rot_y"/>
            <axis xyz="0 0 1"/>

            <limit effort="1000.0" velocity="100.0" />
            <dynamics damping="10.0" friction="0.0"/>
        </joint>

        <joint name="fake_liadr_front_joint_rot_y" type="revolute">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="fake_liadr_front_link_rot_y"/>
            <child link="lidar_link_rot"/>
            <axis xyz="0 1 0"/>
            <!-- Limit set to +/- 15 degrees so we have at least one horizontal line
      with VLP-16 -->
            <limit lower="${-90 * M_PI / 180}" upper="${90 * M_PI / 180}" effort="1000" velocity="${1.0 * 30 * M_PI / 180}"/>
            <dynamics damping="0.7"/>
        </joint>

        <!-- Add LIDAR(s) -->
        <xacro:VLP-16 parent="lidar_link_rot" name="velodyne_rot" topic="/${topic}" hz="${frequency}" samples="440" gpu="${use_gpu}">
            <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
        </xacro:VLP-16>

        <!-- Gazebo necessary section -->
        <gazebo reference="fake_liadr_front_link_z_0">
            <material>Gazebo/Grey</material>
        </gazebo>
        <gazebo reference="fake_liadr_front_link_x_1">
            <material>Gazebo/Grey</material>
        </gazebo>
        <gazebo reference="fake_liadr_front_link_y_2">
            <material>Gazebo/Grey</material>
        </gazebo>
        <gazebo reference="fake_liadr_front_link_y_2">
            <material>Gazebo/Grey</material>
        </gazebo>

        <gazebo reference="fake_liadr_front_link_z_0">
            <mu1>0.0</mu1>
            <mu2>0.0</mu2>
            <kp>1000000.0</kp>
            <kd>100.0</kd>
            <minDepth>0.001</minDepth>
            <maxVel>1.0</maxVel>
        </gazebo>

        <gazebo reference="fake_liadr_front_link_rot_y">
            <mu1>0.0</mu1>
            <mu2>0.0</mu2>
            <kp>1000000.0</kp>
            <kd>100.0</kd>
            <minDepth>0.001</minDepth>
            <maxVel>1.0</maxVel>
        </gazebo>

        <!-- HW Interface -->
        <transmission name="lidar_joint_rot_transmssion">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="lidar_joint_rot">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="lidar_joint_rot_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <transmission name="fake_liadr_front_joint_z_0_transmssion">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="fake_liadr_front_joint_z_0">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="fake_liadr_front_joint_z_0_motor">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <transmission name="fake_liadr_front_joint_y_2_transmssion">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="fake_liadr_front_joint_y_2">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="fake_liadr_front_joint_y_2_motor">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <transmission name="fake_liadr_front_joint_x_1_transmssion">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="fake_liadr_front_joint_x_1">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="fake_liadr_front_joint_x_1_motor">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <transmission name="fake_liadr_front_joint_rot_y_transmssion">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="fake_liadr_front_joint_rot_y">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="fake_liadr_front_joint_rot_y_motor">
                <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

    </xacro:macro>

</robot>
